# .github/workflow-templates/rust-ci.yml

name: Rust CI Pipeline
description: 'A workflow template for building, testing, and linting Rust applications with HashiCorp Vault integration.'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Setup Rust toolchain
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          override: true

      # Cache Cargo registry and dependencies
      - name: Cache Cargo Registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      # Authenticate with HashiCorp Vault
      - name: Authenticate with Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_URL }}
          method: github
          token: ${{ secrets.VAULT_TOKEN }}

      # Fetch secrets from Vault
      - name: Fetch Secrets
        id: fetch
        run: |
          SECRET_VALUE=$(vault kv get -field=value secret/myapp/config)
          echo "##[set-output name=secret_value;]$SECRET_VALUE"

      # Build the project
      - name: Build
        run: cargo build --verbose

      # Run tests
      - name: Run Tests
        run: cargo test --verbose

      # Run Clippy for linting
      - name: Run Clippy
        run: cargo clippy -- -D warnings

  
